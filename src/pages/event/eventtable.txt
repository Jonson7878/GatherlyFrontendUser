import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import axios from 'axios';
import { FaPlus, FaEdit, FaTrash } from 'react-icons/fa';
import { jwtDecode } from 'jwt-decode';
import { Alert, Stack } from '@mui/material';

const EventTable = () => {
    const [events, setEvents] = useState([]);
    const [userRole, setUserRole] = useState('');
    const [userId, setUserId] = useState('');
    const [userCompanyId, setUserCompanyId] = useState('');
    const [alert, setAlert] = useState({ message: '', severity: '' });
    const navigate = useNavigate();

    const fetchEvents = async () => {
        try {
            const token = localStorage.getItem('token');
            if (!token) {
                setAlert({ message: 'You are not authorized. Please log in.', severity: 'warning' });
                setTimeout(() => navigate('/login'), 1500);
                return;
            }

            const decoded = jwtDecode(token);
            const role = decoded.role || decoded.user?.role || '';
            const id = decoded.id || decoded.user?.id || '';
            const companyId = decoded.companyId || decoded.user?.companyId || '';

            setUserRole(role);
            setUserId(id);
            setUserCompanyId(companyId);

            const response = await axios.get('http://localhost:4000/api/events', {
                headers: { Authorization: `Bearer ${token}` },
            });

            setEvents(response.data.events);
        } catch (error) {
            console.error('Error fetching events:', error);
            setAlert({ message: error.response?.data?.message || 'Error fetching events', severity: 'error' });
            setTimeout(() => setAlert({ message: '', severity: '' }), 3000);
        }
    };

    useEffect(() => {
        fetchEvents(); // eslint-disable-next-line
    }, []);

    const hasPermission = (event) => {
        const creatorId = event.createdBy?._id || event.createdBy;
        const creatorCompanyId =
            event.createdBy?.companyId || // ID format
            event.createdBy?.company?._id || // if populated
            event.createdBy?.company || ''; // fallback

        const isOwner = creatorId === userId;
        const isSameCompanyAdmin = userRole === 'admin' && creatorCompanyId === userCompanyId;

        return isOwner || isSameCompanyAdmin;
    };

    const handleEdit = (eventId) => {
        const event = events.find(e => e._id === eventId);
        if (event && hasPermission(event)) {
            navigate(`/update-event/${eventId}`);
        } else {
            setAlert({ message: 'You are not authorized to edit this event.', severity: 'error' });
            setTimeout(() => setAlert({ message: '', severity: '' }), 3000);
        }
    };

    const handleDelete = async (eventId) => {
        const event = events.find(e => e._id === eventId);
        if (!event || !hasPermission(event)) {
            setAlert({ message: 'You are not authorized to delete this event.', severity: 'error' });
            setTimeout(() => setAlert({ message: '', severity: '' }), 3000);
            return;
        }

        if (!window.confirm('Are you sure you want to delete this event?')) return;

        try {
            const token = localStorage.getItem('token');
            await axios.delete(`http://localhost:4000/api/events/delete/${eventId}`, {
                headers: { Authorization: `Bearer ${token}` },
            });
            setAlert({ message: 'Event deleted successfully!', severity: 'success' });
            fetchEvents();
            setTimeout(() => setAlert({ message: '', severity: '' }), 3000);
        } catch (error) {
            console.error('Error deleting event:', error);
            setAlert({ message: error.response?.data?.message || 'Error deleting event', severity: 'error' });
            setTimeout(() => setAlert({ message: '', severity: '' }), 3000);
        }
    };

    return (
        <div style={{ padding: '20px', maxWidth: '1000px', margin: '0 auto' }}>
            <h2>Event Management</h2>

            {alert.message && (
                <Stack sx={{ width: '100%', mb: 2 }}>
                    <Alert severity={alert.severity} sx={{ fontWeight: 'bold' }} onClose={() => setAlert({ message: '', severity: '' })}>
                        {alert.message}
                    </Alert>
                </Stack>
            )}

            <button
                onClick={() => navigate('/create-event')}
                style={{
                    display: 'flex',
                    alignItems: 'center',
                    padding: '8px 12px',
                    backgroundColor: '#00796b',
                    color: 'white',
                    border: 'none',
                    borderRadius: '5px',
                    marginBottom: '15px',
                    cursor: 'pointer'
                }}
            >
                <FaPlus style={{ marginRight: '5px' }} /> Add Event
            </button>

            {events.length > 0 ? (
                <table border="1" cellPadding="8" cellSpacing="0" style={{ width: '100%' }}>
                    <thead>
                        <tr>
                            <th>Event Name</th>
                            <th>Date & Time</th>
                            <th>Location</th>
                            <th>Created By</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {events.map((event) => (
                            <tr key={event._id}>
                                <td>{event.eventName}</td>
                                <td>{new Date(event.dateTime).toLocaleString('en-GB', {
                                    weekday: 'short',
                                    day: 'numeric',
                                    month: 'numeric',
                                    year: 'numeric',
                                    hour: 'numeric',
                                    minute: '2-digit',
                                    hour12: true,
                                })}</td>
                                <td>{event.location}</td>
                                <td>{event.createdBy?.username || 'N/A'}</td>
                                <td>
                                    <FaEdit
                                        onClick={() => handleEdit(event._id)}
                                        style={{ cursor: 'pointer', marginRight: '10px', color: 'blue' }}
                                    />
                                    <FaTrash
                                        onClick={() => handleDelete(event._id)}
                                        style={{ cursor: 'pointer', color: 'red' }}
                                    />
                                </td>
                            </tr>
                        ))}
                    </tbody>
                </table>
            ) : (
                <p>No events available.</p>
            )}
        </div>
    );
};

export default EventTable;
